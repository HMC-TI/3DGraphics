package com.example.daudiodemo;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.opengl.GLSurfaceView;
import android.os.Bundle;
import android.provider.Settings;
import android.view.InputDevice;
import android.view.KeyEvent;

public class DemoGraphics extends Activity 
{
	private static final String GAMETEL_NAME =    "gametel";
    private static final String GAMETEL_PACKAGE = "com.fructel.gametel";
    
	private BroadcastReceiver mReceiver;
	/** Hold a reference to our GLSurfaceView */
	private MyGLSurfaceView mGLSurfaceView;

	@Override
	public void onCreate(Bundle savedInstanceState) 
	{
		super.onCreate(savedInstanceState);
		mGLSurfaceView = new MyGLSurfaceView(this);
		mReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                updateGametelStatus();
            }
        };
		setContentView(mGLSurfaceView);
	}
	
	@Override
    protected void onDestroy() {
        super.onDestroy();
        mReceiver = null;
    }

	@Override
	protected void onResume() 
	{
		// The activity must call the GL surface view's onResume() on activity onResume().
		/* Register a listener to detect when Gametel devices connects/disconnects */
        IntentFilter filter = new IntentFilter();
        /* For devices in RFCOMM mode (which uses the InputMethod) */
        filter.addAction(Intent.ACTION_INPUT_METHOD_CHANGED); 
        /* For devices in HID mode */
        filter.addAction(Intent.ACTION_CONFIGURATION_CHANGED); 
        registerReceiver(mReceiver, filter);
        
        /* Check if there are any Gametel devices connected */
        updateGametelStatus();
        
		super.onResume();
		mGLSurfaceView.onResume();
	}

	@Override
	protected void onPause() 
	{
		unregisterReceiver(mReceiver);
		// The activity must call the GL surface view's onPause() on activity onPause().
		super.onPause();
		mGLSurfaceView.onPause();
	}
	
	@Override
    public boolean onKeyDown (int keyCode, KeyEvent event) {
        if (!mGLSurfaceView.handleKeyEvent(keyCode, event))
            return super.onKeyDown(keyCode, event);
        return true;
    }
    
    @Override
    public boolean onKeyUp (int keyCode, KeyEvent event) {
        if (!mGLSurfaceView.handleKeyEvent(keyCode, event))
            return super.onKeyDown(keyCode, event);
        return true;
    }
    
    private void updateGametelStatus()
    {
/*        boolean gametelAvailable = false;

        // Check if there are any Gametels connected as HID gamepad
        if (isHIDGametelConnected())
            gametelAvailable = true;
        
        // Check if the Gametel InputMethod is active
        if (isGametelIMEActive())
            gametelAvailable = true;
 */   }
/*    
    // Function that checks if the Gametel InputMethod is currently active
    private boolean isGametelIMEActive() {
        String activeIme = Settings.Secure.getString(getContentResolver(), 
                                                     Settings.Secure.DEFAULT_INPUT_METHOD);
        return activeIme.startsWith(GAMETEL_PACKAGE);
    }    

    // Function that checks if there are any Gametels in HID gamepad mode currently connected 
    private boolean isHIDGametelConnected() {
        
        int ids[] = InputDevice.getDeviceIds();
        
        for (int i = 0; i < ids.length; i++) {
            InputDevice dev = InputDevice.getDevice(ids[i]);
            if (dev.getName().toLowerCase().contains(GAMETEL_NAME))
                return true;
        }
        
        return false;
    }*/
}

class MyGLSurfaceView extends GLSurfaceView {

    private final DemoRenderer mRenderer;

    public MyGLSurfaceView(Context context) {
        super(context);

        // Create an OpenGL ES 2.0 context.
        setEGLContextClientVersion(2);

        // Set the Renderer for drawing on the GLSurfaceView
        mRenderer = new DemoRenderer();
        setRenderer(mRenderer);

        // Render the view only when there is a change in the drawing data
        setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);
    }
    
    /* Help function to parse the Gametel key */ 
    public boolean handleKeyEvent(int keyCode, KeyEvent event) {
        boolean pressed = event.getAction() == KeyEvent.ACTION_DOWN;
        
        switch (keyCode) {
        
        /* Upper navigation button */
        case KeyEvent.KEYCODE_DPAD_UP:
            break;
            
           /* Right navigation button */
        case KeyEvent.KEYCODE_DPAD_RIGHT:
        	if (pressed) {
        		mRenderer.mAngle -= 2*3.14159265359f / 100.0f;
        	}
            break;
            
        /* Lower navigation button */
        case KeyEvent.KEYCODE_DPAD_DOWN:
            break;
            
        /* Left navigation button */
        case KeyEvent.KEYCODE_DPAD_LEFT:
        	if (pressed) {
        		mRenderer.mAngle += 2*3.14159265359f / 100.0f;
        	}
            break;
                        
        /* Start button */
        case KeyEvent.KEYCODE_BUTTON_START:
            break;
            
        /* Select button */
        case KeyEvent.KEYCODE_BUTTON_SELECT:
            break;
            
        /* Left trigger button */
        case KeyEvent.KEYCODE_BUTTON_L1:
            break;
            
        /* Right trigger button */
        case KeyEvent.KEYCODE_BUTTON_R1:
            break;

        /* Upper action button */
        case KeyEvent.KEYCODE_BUTTON_Y:
            break;
            
           /* Right action button - can either be BACK+ALT or BUTTON_C depending on device mode */
        case KeyEvent.KEYCODE_BACK:
            break;
        case KeyEvent.KEYCODE_BUTTON_C:
            break;

        /* Lower action button - can either be DPAD_CENTER or BUTTON_Z depending on device mode */
        case KeyEvent.KEYCODE_DPAD_CENTER:
        case KeyEvent.KEYCODE_BUTTON_Z:
            break;
            
           /* Left action button */
        case KeyEvent.KEYCODE_BUTTON_X:
            break;
            
        default:
            return false;
        }
        return true;
    }
}